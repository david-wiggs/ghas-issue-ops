name: GHAS Enablement Workflow

on:
  issues:
    types: [opened]

jobs:
  process-ghas-request:
    if: contains(github.event.issue.labels.*.name, 'ghas-enablement')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    outputs:
      matrix_json: ${{ steps.group_repos.outputs.matrix_json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: npm install js-yaml
      
      - name: Parse issue body
        id: parse_issue
        uses: actions/github-script@v7
        with:
          script: |
            const helpers = require('${{ github.workspace }}/scripts/ghas-helpers.js');
            const issue = context.payload.issue;
            
            // Use helper function to parse the issue body
            const parsedData = helpers.parseIssueBody(issue.body);
            
            // Set outputs for use in later steps
            core.setOutput('repositories', JSON.stringify(parsedData.repositories));
            core.setOutput('enable_secret_scanning', parsedData.features.enableSecretScanning);
            core.setOutput('enable_code_scanning', parsedData.features.enableCodeScanning);
            core.setOutput('enable_dependabot_alerts', parsedData.features.enableDependabotAlerts);
            core.setOutput('min_remaining_licenses', parsedData.minRemainingLicenses);
            core.setOutput('skip_license_check', parsedData.skipLicenseCheck);
            
            return parsedData;
      
      - name: Parse config.yaml and group repositories by GHES instance
        id: group_repos
        uses: actions/github-script@v7
        with:
          script: |
            const helpers = require('${{ github.workspace }}/scripts/ghas-helpers.js');
            
            // Get repositories and feature flags from previous step
            const repositoriesJson = '${{ steps.parse_issue.outputs.repositories }}';
            const enableSecretScanning = ${{ steps.parse_issue.outputs.enable_secret_scanning }};
            const enableCodeScanning = ${{ steps.parse_issue.outputs.enable_code_scanning }};
            const enableDependabotAlerts = ${{ steps.parse_issue.outputs.enable_dependabot_alerts }};
            const minRemainingLicenses = ${{ steps.parse_issue.outputs.min_remaining_licenses }};
            const skipLicenseCheck = ${{ steps.parse_issue.outputs.skip_license_check }};
            
            // Use helper function to parse config and group repositories
            const matrixItems = helpers.parseConfigAndGroupRepos(
              repositoriesJson, 
              enableSecretScanning, 
              enableCodeScanning, 
              enableDependabotAlerts, 
              minRemainingLicenses
            );
            
            // Add skipLicenseCheck to each matrix item
            matrixItems.forEach(item => {
              item.skip_license_check = skipLicenseCheck;
            });
            
            // Save the matrix JSON for the next job
            core.setOutput('matrix_json', JSON.stringify(matrixItems));

  enable-ghas-for-instances:
    needs: process-ghas-request
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.process-ghas-request.outputs.matrix_json) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: npm install js-yaml
      
      
      - name: Check license availability
        id: check_licenses
        uses: actions/github-script@v7
        env:
          ENTERPRISE_URL: ${{ matrix.api_url }}
          ENTERPRISE_NAME: ${{ matrix.instance_name }}
          MIN_REMAINING_LICENSES: ${{ matrix.min_remaining_licenses }}
          AUTH_VAR: ${{ matrix.auth_var }}
          GH_ENTERPRISE_TOKEN: ${{ secrets[matrix.auth_var] }}
          GH_ENTERPRISE_TOKEN_CLOUD: ${{ secrets.GH_ENTERPRISE_TOKEN_CLOUD }}
        with:
          script: |
            const helpers = require('${{ github.workspace }}/scripts/ghas-helpers.js');
            
            // Check if we should skip the license check
            const skipCheck = ${{ matrix.skip_license_check }};
            console.log(`Skip license check: ${skipCheck ? 'Yes' : 'No'}`);
            
            // Use improved helper function that handles skipping internally
            const licenseInfo = helpers.checkLicenseAvailability(process.env, skipCheck);
            
            // Set outputs for use in later steps
            core.setOutput('available_licenses', licenseInfo.availableLicenses);
            core.setOutput('total_licenses', licenseInfo.totalLicenses);
            core.setOutput('used_licenses', licenseInfo.usedLicenses);
            core.setOutput('has_enough_licenses', licenseInfo.hasEnoughLicenses.toString());
            core.setOutput('skip_license_check', licenseInfo.skipLicenseCheck);
      
      - name: Enable GHAS Features
        id: enable_features
        if: steps.check_licenses.outputs.has_enough_licenses == 'true'
        env:
          ENTERPRISE_URL: ${{ matrix.api_url }}
          REPOSITORIES: ${{ toJson(matrix.repositories) }}
          ENABLE_SECRET_SCANNING: ${{ matrix.enable_secret_scanning }}
          ENABLE_CODE_SCANNING: ${{ matrix.enable_code_scanning }}
          ENABLE_DEPENDABOT_ALERTS: ${{ matrix.enable_dependabot_alerts }}
          MIN_REMAINING_LICENSES: ${{ matrix.min_remaining_licenses }}
        run: |
          export GH_ENTERPRISE_TOKEN="${{ secrets[matrix.auth_var] }}"
          if [[ "$ENABLE_SECRET_SCANNING" != "true" && "$ENABLE_CODE_SCANNING" != "true" && "$ENABLE_DEPENDABOT_ALERTS" != "true" ]]; then
            echo "No GHAS features selected for enablement"
            exit 0
          fi
          
          echo "Enabling selected GHAS features for repositories"
          # Extract hostname from ENTERPRISE_URL for GitHub CLI
          HOSTNAME=$(echo $ENTERPRISE_URL | sed -E 's|https?://([^/]+)/.*|\1|' | sed 's/api\.//')
          echo "Using hostname: $HOSTNAME"
          
          repos=$(echo $REPOSITORIES | jq -r '.[]')
          enabled_repos=()
          
          for repo in $repos; do
            if [ -n "$repo" ]; then
              echo "Processing repository: $repo"
              # Extract the org and repo_name from the URL path
              # Format: https://hostname/org/repo or http://hostname/org/repo
              # Use sed to extract just org/repo part from the full URL
              repo_path=$(echo "$repo" | sed -E 's|https?://[^/]+/(.+)|\1|')
              IFS='/' read -r org repo_name <<< "$repo_path"
              
              # Validate that we have both org and repo_name
              if [[ -z "$org" || -z "$repo_name" ]]; then
                echo "Error: Could not extract organization and repository name from $repo"
                continue
              fi
              
              echo "Extracted org: $org, repo_name: $repo_name from $repo"
              
              # First check if Advanced Security is enabled on the repository
              echo "Checking if Advanced Security is enabled for $repo"
              repo_info=$(gh api -H "Accept: application/vnd.github+json" "/repos/$org/$repo_name" \
                --hostname $HOSTNAME --jq .security_and_analysis 2>/dev/null || echo "{}")
              
              # Check if advanced security is enabled
              advanced_security_enabled=$(echo $repo_info | jq -r '.advanced_security.status // "disabled"')
              
              if [[ "$advanced_security_enabled" != "enabled" ]]; then
                echo "Advanced Security is not enabled for $repo. Enabling it now..."
                echo '{"security_and_analysis":{"advanced_security":{"status":"enabled"}}}' | \
                gh api -X PATCH -H "Accept: application/vnd.github+json" -H "Content-Type: application/json" "/repos/$org/$repo_name" \
                  --hostname $HOSTNAME \
                  --input -
                
                echo "Advanced Security has been enabled for $repo"
              else
                echo "Advanced Security is already enabled for $repo"
              fi
              
              # If Code Scanning selected, enable using default setup
              # Note: Default setup also enables Secret Scanning, so we skip the separate Secret Scanning enablement
              if [[ "$ENABLE_CODE_SCANNING" == "true" ]]; then
                echo "Enabling Code Scanning with default setup for $repo"
                echo '{"state":"configured"}' | \
                gh api -X PUT -H "Accept: application/vnd.github+json" -H "Content-Type: application/json" "/repos/$org/$repo_name/code-scanning/default-setup" \
                  --hostname $HOSTNAME \
                  --input -
                  
                enabled_repos+=("$repo")
                continue # Skip individual feature enablement since default setup is comprehensive
              fi
              
              # If Secret Scanning selected (and we're not using default setup)
              if [[ "$ENABLE_SECRET_SCANNING" == "true" ]]; then
                echo "Enabling Secret Scanning for $repo"
                echo '{"security_and_analysis":{"secret_scanning":{"status":"enabled"}}}' | \
                gh api -X PATCH -H "Accept: application/vnd.github+json" -H "Content-Type: application/json" "/repos/$org/$repo_name" \
                  --hostname $HOSTNAME \
                  --input -
              fi
              
              # If Dependabot Alerts selected
              if [[ "$ENABLE_DEPENDABOT_ALERTS" == "true" ]]; then
                echo "Enabling Dependabot Alerts for $repo"
                echo '{"security_and_analysis":{"vulnerability_alerts":{"status":"enabled"}}}' | \
                gh api -X PATCH -H "Accept: application/vnd.github+json" -H "Content-Type: application/json" "/repos/$org/$repo_name" \
                  --hostname $HOSTNAME \
                  --input -
              fi
              
              enabled_repos+=("$repo")
              echo "GHAS features enabled for $repo"
            fi
          done
          
          # Store enabled repos for reporting
          echo "enabled_repos=$(echo "${enabled_repos[@]}" | jq -R -s -c 'split(" ")')" >> $GITHUB_OUTPUT
      
      - name: Update issue with results
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const helpers = require('${{ github.workspace }}/scripts/ghas-helpers.js');
            
            // All license check information comes from single step now
            const hasEnoughLicenses = '${{ steps.check_licenses.outputs.has_enough_licenses }}' === 'true';
            const skipLicenseCheck = '${{ steps.check_licenses.outputs.skip_license_check }}' === 'true';
            
            // Prepare parameters for comment creation
            const params = {
              enableSecretScanning: ${{ matrix.enable_secret_scanning }},
              enableCodeScanning: ${{ matrix.enable_code_scanning }},
              enableDependabotAlerts: ${{ matrix.enable_dependabot_alerts }},
              repositories: ${{ toJson(matrix.repositories) }},
              hasEnoughLicenses: hasEnoughLicenses,
              availableLicenses: parseInt(${{ steps.check_licenses.outputs.available_licenses }}),
              totalLicenses: parseInt(${{ steps.check_licenses.outputs.total_licenses }}),
              usedLicenses: parseInt(${{ steps.check_licenses.outputs.used_licenses }}),
              skipLicenseCheck: skipLicenseCheck,
              minRemainingLicenses: ${{ matrix.min_remaining_licenses }},
              hostname: "${{ matrix.hostname }}",
              instanceName: "${{ matrix.instance_name }}"
            };
            
            // Create comment text
            const comment = helpers.createResultsComment(params);
            
            // Post comment to the issue
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            // If not enough licenses, exit early
            if (!params.hasEnoughLicenses) {
              return;
            }

